[
  {
    "section": "1.1 AI 스펙트럼",
    "summary": "AI는 심볼릭 AI에서 머신러닝, 딥러닝을 거쳐 생성형 AI로 진화해왔으며, 생성형 AI는 데이터를 바탕으로 새로운 콘텐츠를 생성할 수 있다.",
    "evidence": [
      "심볼릭 AI는 규칙 기반으로 동작하며 전문가 시스템과 논리 추론을 중심으로 한다.",
      "고전적 머신러닝은 명시적 규칙 없이 데이터를 통해 예측 모델을 만든다.",
      "딥러닝은 신경망 기반 구조로 복잡한 특징을 스스로 학습한다.",
      "생성형 AI는 텍스트, 이미지, 음성, 코드 등을 생성할 수 있는 능력을 갖췄다."
    ]
  },
  {
    "section": "1.2 생성형 AI와 대형 언어 모델의 기초",
    "summary": "대형 언어 모델은 텍스트 데이터를 기반으로 학습된 신경망 모델로, 문맥을 이해하고 적절한 응답을 생성할 수 있다.",
    "evidence": [
      "LLM은 대규모 말뭉치를 학습해 언어 패턴을 이해하고 예측할 수 있다.",
      "Transformer 구조를 활용하며, 맥락 창을 통해 입력을 처리한다.",
      "토큰화와 임베딩을 통해 문장의 의미를 수치적으로 표현한다."
    ]
  },
  {
    "section": "1.3 LLM의 종류",
    "summary": "대형 언어 모델(LLM)은 파운데이션 모델, 명령어 튜닝 모델, 추론 모델로 구분되며, 각각 범용 학습, 지시 기반 응답, 단계적 추론에 특화되어 있다.",
    "evidence": [
      "파운데이션 모델은 다양한 데이터를 학습하여 범용적인 응답 능력을 갖춘다.",
      "명령어 튜닝 모델은 사용자의 명령에 따른 정확한 작업 수행에 중점을 둔다.",
      "추론 모델은 Chain-of-Thought 방식으로 복잡한 문제를 단계적으로 해결할 수 있다."
    ]
  },
  {
    "section": "1.4 멀티모달 LLM과 비전-언어 모델",
    "summary": "멀티모달 LLM은 텍스트, 이미지, 음성 등 다양한 입력을 처리하며, 비전-언어 모델은 시각 정보와 언어 정보를 결합해 복합적인 작업을 수행할 수 있다.",
    "evidence": [
      "GPT-4와 같은 멀티모달 모델은 텍스트 외에도 이미지와 음성을 처리할 수 있다.",
      "비전-언어 모델은 이미지 캡션 생성, 시각 질의응답 등 복합 작업에 활용된다.",
      "이러한 모델은 GUI 기반 테스트나 이미지 기반 시나리오 작성 등에 응용 가능하다."
    ]
  },
  {
    "section": "2.1 소프트웨어 테스팅 작업을 위한 주요 LLM 기능",
    "summary": "생성형 AI는 요구사항 분석부터 테스트 케이스 작성, 테스트 자동화, 테스트 결과 분석 및 문서화에 이르기까지 소프트웨어 테스팅 전 단계에 활용될 수 있다.",
    "evidence": [
      "요구사항 분석 단계에서 LLM은 모호하거나 누락된 부분을 식별하는 데 도움을 줄 수 있다.",
      "테스트 케이스 및 테스트 데이터 자동 생성을 통해 설계 효율성이 향상된다.",
      "테스트 실행 결과 분석 및 요약 리포트 작성에도 활용된다."
    ]
  },
  {
    "section": "2.2 AI 챗봇과 LLM 기반 테스팅 애플리케이션",
    "summary": "AI 챗봇은 대화형 인터페이스를 통해 테스트 설계 및 자동화에 도움을 주며, LLM 기반 도구는 복잡한 테스팅 태스크를 지원한다.",
    "evidence": [
      "챗봇은 프롬프트 기반으로 테스트 설계, 질문 응답, 테스트 보고서 작성을 보조할 수 있다.",
      "LLM 기반 테스팅 앱은 사용자의 입력을 분석해 테스트 자동화를 지원한다.",
      "성공적인 활용을 위해서는 명확하고 정제된 프롬프트 설계가 중요하다."
    ]
  },
  {
    "section": "3.1 프롬프트 구조",
    "summary": "효과적인 프롬프트는 역할, 맥락, 지침, 입력, 제약, 출력 형식의 6요소로 구성되며, 구조적 프롬프트가 더 일관되고 유용한 결과를 생성한다.",
    "evidence": [
      "역할(Role)을 명시하면 LLM은 해당 역할에 맞게 응답한다.",
      "맥락(Context)과 지침(Instruction)은 목표와 상황을 명확히 한다.",
      "제약(Constraints)과 출력 형식(Output Format)은 결과의 일관성을 높인다."
    ]
  },
  {
    "section": "3.2 핵심 프롬프트 기법",
    "summary": "Few-shot, Chain-of-Thought, Meta prompting 등의 고급 프롬프트 기법은 복잡한 작업이나 추론 과정을 더 효과적으로 수행하게 한다.",
    "evidence": [
      "Few-shot prompting은 예제를 포함하여 모델이 학습 패턴을 추론하도록 돕는다.",
      "Chain-of-Thought prompting은 단계적인 추론을 유도한다.",
      "Meta prompting은 프롬프트 자체를 생성하는 고급 전략이다."
    ]
  },
  {
    "section": "4.1 테스트 분석",
    "summary": "LLM은 테스트 분석 단계에서 요구사항 기반 조건 도출, 리스크 분석, 결함 예측 등 다양한 분석 작업을 지원할 수 있다.",
    "evidence": [
      "요구사항을 자연어로 분석하여 테스트 조건을 도출할 수 있다.",
      "결함 히스토리를 학습하여 결함이 발생할 가능성이 높은 영역을 예측할 수 있다.",
      "리스크 기반 우선순위 설정에 기여할 수 있다."
    ]
  },
  {
    "section": "4.2 테스트 설계 및 구현",
    "summary": "LLM은 테스트 케이스, 테스트 데이터, 테스트 자동화 스크립트 생성에 활용되며 테스트 실행 계획 수립에도 도움을 준다.",
    "evidence": [
      "자연어 요구사항으로부터 테스트 케이스를 생성할 수 있다.",
      "자동화 프레임워크에 맞는 스크립트를 생성할 수 있다.",
      "복잡한 조건이나 경로 기반 테스트 시나리오도 설계 가능하다."
    ]
  },
  {
    "section": "4.3 리그레션 테스트 활용",
    "summary": "생성형 AI는 리그레션 테스트에서 자가 치유 기능과 테스트 최적화, 자동화된 리포트 생성을 통해 테스트 품질과 효율성을 높인다.",
    "evidence": [
      "LLM은 UI 변경에 따라 테스트 코드를 자동으로 수정할 수 있다.",
      "실행 로그 분석을 통해 실패 원인을 파악하고 리포트로 정리한다.",
      "테스트 케이스의 중복 제거 및 실행 시간 단축이 가능하다."
    ]
  },
  {
    "section": "5.1 결과 평가 지표",
    "summary": "LLM이 생성한 출력물은 정확성, 일관성, 실행 가능성을 기준으로 평가해야 하며, 품질 보장을 위해 명확한 기준이 필요하다.",
    "evidence": [
      "정확성은 사실과 일치하는지를 측정한다.",
      "일관성은 입력과 응답 간의 논리적 연결을 평가한다.",
      "실행 가능성은 생성된 결과가 실제로 사용 가능한지를 판단한다."
    ]
  },
  {
    "section": "5.2 프롬프트 개선",
    "summary": "프롬프트는 반복적 테스트, 사용자 피드백, A/B 테스트 등을 통해 개선할 수 있으며, 오류 분석도 중요한 개선 도구다.",
    "evidence": [
      "사용자 피드백을 반영해 프롬프트를 보완할 수 있다.",
      "A/B 테스트로 결과 품질을 비교하고 최적화할 수 있다.",
      "프롬프트 입력에 대한 출력 오류를 분석하여 개선 방향을 찾을 수 있다."
    ]
  }
]